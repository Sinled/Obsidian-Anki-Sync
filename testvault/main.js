'use strict';

var obsidian = require('obsidian');

class Block {
    constructor(vault, file) {
        this.vault = vault;
        this.file = file;
    }
}

function getAttrib(comment, attribute) {
    const CommentsRegExp = /<!--((\n|.)*?)-->/gi; // https://regexr.com/5tatm
    let matches = [...comment.matchAll(CommentsRegExp)];
    let parser = new DOMParser();
    let xmlStatement = parser.parseFromString("<" + matches[0][1].trim() + " />", "text/xml");
    return xmlStatement.getRootNode().children[0].getAttribute(attribute);
    // 
}

class ClozeBlock extends Block {
    constructor(vault, file, original, original_start_at, original_end_at) {
        super(vault, file);
        this.original = original;
        this.original_start_at = original_start_at;
        this.original_end_at = original_end_at;
    }
    mdToAnkiFormat() {
        this.anki = this.original;
        // -- Preprocess --
        // TODO: Images?
        // Remove All Comments
        const CommentsRegExp = /<!--((\n|.)*?)-->/gi; // https://regexr.com/5tatm
        this.anki = this.anki.replaceAll(CommentsRegExp, "");
        // Add the clozes
        const ClozeStatementRegExp = /<!--(\t|\n| )*?cloze((\n| (\n|.)*?)*?) -->/gi; // https://regexr.com/5tb31
        let matches = [...this.original.matchAll(ClozeStatementRegExp)];
        matches.forEach((match) => {
            console.log(match[0]);
            let clozeId = getAttrib(match[0], "id");
            let clozeText = getAttrib(match[0], "text");
            let n = getAttrib(match[0], "n") || "All";
            if (n == "All") {
                this.anki = this.anki.replaceAll(clozeText, `{{c${clozeId}::${clozeText}}}`);
            }
            else {
                let i = 0;
                this.anki = this.anki.replace(clozeText, function (match) {
                    return (i++ == n) ? `{{c${clozeId}::${clozeText}}}` : match;
                });
            }
        });
        // Fix Latex format
        const MdInlineMathRegExp = /(?<!\$)\$((?=[\S])(?=[^$])[\s\S]*?\S)\$/g; // https://github.com/Pseudonium/Obsidian_to_Anki/blob/488454f3c39a64bd0381f490c20f47866a3e3a3d/src/constants.ts
        const MdDisplayMathRegExp = /\$\$([\s\S]*?)\$\$/g; // https://github.com/Pseudonium/Obsidian_to_Anki/blob/488454f3c39a64bd0381f490c20f47866a3e3a3d/src/constants.ts
        this.anki = this.anki.replace(MdInlineMathRegExp, function (match) {
            return `\( ${match[1]} \)`;
        });
        this.anki = this.anki.replace(MdDisplayMathRegExp, function (match) {
            return `\( ${match[1]} \)`;
        });
        // Convert Md to HTML format
    }
}
async function parseClozeBlock(vault, file) {
    var res = [];
    const ClozeBlockRegExp = /<!--(\t|\n| )*?clozeblock-start(\n| (\n|.)*?)*?-->(\n|.)*?<!--(\t|\n| )*?clozeblock-end(\t|\n| )*?-->/gi; // https://regexr.com/5tace
    var fileContent = await vault.read(file);
    let matches = [...fileContent.matchAll(ClozeBlockRegExp)];
    matches.forEach((match) => {
        var block = new ClozeBlock(vault, file, match[0], match.index, match[0].length);
        res.push(block);
    });
    return res;
}

class MyPlugin extends obsidian.Plugin {
    async onload() {
        console.log('Loading ObsidianCMuToAnki');
        // Add ribbon for syncing obsidian to anki
        const ANKI_ICON = `<path fill="currentColor" stroke="currentColor" d="M 27.00,3.53 C 18.43,6.28 16.05,10.38 16.00,19.00 16.00,19.00 16.00,80.00 16.00,80.00 16.00,82.44 15.87,85.73 16.74,88.00 20.66,98.22 32.23,97.00 41.00,97.00 41.00,97.00 69.00,97.00 69.00,97.00 76.63,96.99 82.81,95.84 86.35,88.00 88.64,82.94 88.00,72.79 88.00,67.00 88.00,67.00 88.00,24.00 88.00,24.00 87.99,16.51 87.72,10.42 80.98,5.65 76.04,2.15 69.73,3.00 64.00,3.00 64.00,3.00 27.00,3.53 27.00,3.53 Z M 68.89,15.71 C 74.04,15.96 71.96,19.20 74.01,22.68 74.01,22.68 76.72,25.74 76.72,25.74 80.91,30.85 74.53,31.03 71.92,34.29 70.70,35.81 70.05,38.73 67.81,39.09 65.64,39.43 63.83,37.03 61.83,36.00 59.14,34.63 56.30,35.24 55.08,33.40 53.56,31.11 56.11,28.55 56.20,25.00 56.24,23.28 55.32,20.97 56.20,19.35 57.67,16.66 60.89,18.51 64.00,17.71 64.00,17.71 68.89,15.71 68.89,15.71 Z M 43.06,43.86 C 49.81,45.71 48.65,51.49 53.21,53.94 56.13,55.51 59.53,53.51 62.94,54.44 64.83,54.96 66.30,56.05 66.54,58.11 67.10,62.74 60.87,66.31 60.69,71.00 60.57,74.03 64.97,81.26 61.40,83.96 57.63,86.82 51.36,80.81 47.00,82.22 43.96,83.20 40.23,88.11 36.11,87.55 29.79,86.71 33.95,77.99 32.40,74.18 30.78,70.20 24.67,68.95 23.17,64.97 22.34,62.79 23.39,61.30 25.15,60.09 28.29,57.92 32.74,58.49 35.44,55.57 39.11,51.60 36.60,45.74 43.06,43.86 Z" />`;
        obsidian.addIcon('anki', ANKI_ICON);
        this.addRibbonIcon('anki', 'Sync Obsidian to Anki', () => {
            this.syncObsidianToAnki();
        });
        // Add command for syncing obsidian to anki
        this.addCommand({
            id: 'sync-obsidian-to-anki',
            name: 'Sync Obsidian to Anki',
            callback: () => {
                this.syncObsidianToAnki();
            }
        });
    }
    onunload() {
        console.log('Unloading ObsidianAnkiMDML');
    }
    async syncObsidianToAnki() {
        new obsidian.Notice(`Starting Obsidian to Anki Sync for vault ${this.app.vault.getName()}...`);
        // Add
        var allClozeBlocks = [];
        for (var file of this.app.vault.getMarkdownFiles()) {
            allClozeBlocks = allClozeBlocks.concat(await parseClozeBlock(this.app.vault, file));
        }
        console.log(allClozeBlocks);
        for (var block of allClozeBlocks) {
            block.mdToAnkiFormat();
        }
        console.log(allClozeBlocks);
        // Create or update the cards
        // Delete the deleted cards
    }
}

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
